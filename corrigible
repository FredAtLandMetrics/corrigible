#!/usr/bin/env python

import argparse
import os
#import yaml
#import heapq
#import jinja2
#import copy
#import subprocess
#import copy
#from jinja2 import Template
#from corrigible.lib.dirpaths import systems_dirpath, plans_dirpath, files_dirpath, temp_exec_dirpath
#from corrigible.lib.plan import plan_index, plan_filepath
#from corrigible.lib.exceptions import RequiredParameterPlansNotProvided, \
                                      #PlansDictContainedNoPlans, \
                                      #PlanFileDoesNotExist, \
                                      #UnknownPlanEncountered, \
                                      #PlanOmittedByRunSelector
from corrigible.lib.playbook import write_ansible_playbook
#from corrigible.lib.system import system_config
from corrigible.lib.hostsfile import write_ansible_hosts
SCRIPT_DIRPATH = os.path.dirname( __file__ )
SOURCES_DIRPATH = os.path.join(SCRIPT_DIRPATH, '..')
PROVISION_ROOT_DIRPATH = os.path.join(SOURCES_DIRPATH, 'provision')
MAX_DIRECTIVE_ORDER = 9999999



        

if __name__ == '__main__':

    # --- command-line options, crawl params
    # ---------------------------------------------------------------
    parser = argparse.ArgumentParser(
        description='provision a server.',
        prog='corrigible'
    )
    
    progargs = ( ( "system", "positional", "the name of the system (or group) whose config will be parsed" ),
                 ( "playbook-output-file", "full", "the playbook output file (for testing, use discouraged)"),
                 ( "hosts-output-file", "full", "the hosts output file (for testing, use discouraged)"),
                 ( "generate-files-only", "short", "this flag tells corrigible to take no action, but only generate the files" ),
                 ( "selectors", "full", "a list of run selectors to be applied to include/exclude plans" ) )
    
    for arginfo in progargs:
        optname, opttype, opthelp = arginfo
        if opttype == "positional":
            parser.add_argument(optname, help=opthelp)
        elif opttype == "short":
            parser.add_argument("--{}".format(optname), help=opthelp, action="store_true") 
        elif opttype == "full":
            parser.add_argument("--{}".format(optname), help=opthelp) 
    
    args = vars(parser.parse_args())
    options = {}
    for opt, val in args.iteritems():
        options[opt] = val
        
    try:
        if "," in options['selectors']:
            selectors = [s.trim() for s in options['selectors'].split(',')]
        elif type(options['selectors']) is str and bool(options['selectors']):
            selectors = [options['selectors']]
        #print "SETTING SELECTORS!!"
        set_run_selectors_list(selectors)
    except (KeyError, AttributeError, TypeError):
        pass
    
        
    
    write_ansible_hosts(options)
    write_ansible_playbook(options)
    
    if not options["generate_files_only"]:
        run_ansible_playbook(playbook_filepath=ansible_playbook_filepath(options),
                             hosts_filepath=ansible_hostsfile_filepath(options))
    