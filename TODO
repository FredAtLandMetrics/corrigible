General TODO
============
1) Try to use for real world uses
2) Write tests based on failures
3) Make tests pass
4) Repeat
5) Parallelize over equal priorities
6) Add tests!

Specific TODO resulting from #1 above
=====================================
1) rocket mode is currently a little broken.  What needs to happen is that, when it is determined that a given plan needs to run, corrigible needs to remove the calling plan from the hashed list otherwise a changed plan three, four or five layers deep will never get called.
2) I'd like it if the hosts line was optional in the ansible stanzas (NOTE: it might actually be...need to test it)
3) Sometimes I'm finding that it's not always easy to figure out exactly where things are going wrong.  I don't think it's necessarily worse than the problems you have with ansible, but it's not much better either.  A lot of the problems I end up having involve ordering plans.  The fix is always to set the prefix number on some plan file, but figuring out which one can be tricky.  So I'd like a utiltity called corrigible_tree that would print the plan execution tree.
4) Add sibling of parameters section, constants, that have overrideability in the opposite directory.  Make them occupy the same namespace as the parameters.  Make them override parameters. (Provides mechanism for ensuring values do not get unexpected overridden)
5) should add a parameters_file: directive that would have same impact as parameters file (perhaps overrideable by the parameters section) but allow for referencing the same parameters file for multiple systems (and plans, I guess)

Wishlist
========
1) fail-on-edited-files - to avoid losing local changes, store md5 hash for any files transferred with the file directive.  if the md5 hash doesn't match the stored one before re-copy, fail and alert
2) script hooks - call a script before or after a run (or just use the index ordering) and, optionally, fail the whole run depending on the outcome of the script...use case: a script that checks to see if there have been any updates in the manifold repository before deploying
2.5) add option to use parameter files
3) promptable parameters - add a way to specify that some parameters be defined at runtime via prompt. Additionally, allow for use of the 'password type' so the password is hidden
4) add npyscreen interface with scrolling capability
5) add option to allow for a system/<name> structure above existing schema for system files like:

   system:
     pluto:
       hosts:
         - hostname: 'otherhost'
           ip_address: 2.3.4.5
       parameters:
         someparam: testval
       plans:
         - plan: do_stuff
     venus:
       hosts: ...

6) to #5, add ability to reference another system file like:

   ...
     mars: earth

   such that, when it gets to mars, it will execute the plans in the earth system file using the parameters which would available to the system had it been defined as proscribed in #5 (overriding any parameters defined in the earth.system file)

7) to #4, add a tab-style interface to allow simultaneous display of output from multiple systems defined in #5 and #6
8) to #3 & #5 & 2.5, add top level parameters available to all systems in the schema
9) to #2.5 and #8 and using example in #5 and #6, add: it should be possible to override promptable params (#3) in earth.system parameters using top-level parameters or parameter files such that, when firing up the multi-tabbed interface that shows the output from 10 simultaneous system deploys, the admin is prompted for all the required passwords at once, before the deploys begin.
10) add support for ansible vault (http://docs.ansible.com/playbooks_vault.html)
11) add way to pause processing, display a message (or maybe run a local script), and allow for an abort

Tests
=====
1) scripts that can run remotely
2) scripts that run locally
3) scripts that run locally against pre-defined input (`ps auxwww`, `dpkg -l`, etc)
4) simple checks for the presence of a file, something listening on a port, a port being open to the local machine
