General TODO
============
1) Try to use for real world uses
2) Write tests based on failures
3) Make tests pass
4) Repeat
5) Parallelize over equal priorities
6) Add tests!

Specific TODO resulting from #1 above
=====================================
1) rocket mode is currently a little broken.  What needs to happen is that, when it is determined that a given plan needs to run, corrigible needs to remove the calling plan from the hashed list otherwise a changed plan three, four or five layers deep will never get called.
2) I'd like it if the hosts line was optional in the ansible stanzas (NOTE: it might actually be...need to test it)
3) Sometimes I'm finding that it's not always easy to figure out exactly where things are going wrong.  I don't think it's necessarily worse than the problems you have with ansible, but it's not much better either.  A lot of the problems I end up having involve ordering plans.  The fix is always to set the prefix number on some plan file, but figuring out which one can be tricky.  So I'd like a utiltity called corrigible_tree that would print the plan execution tree.
4) Add sibling of parameters section, constants, that have overrideability in the opposite directory.  Make them occupy the same namespace as the parameters.  Make them override parameters. (Provides mechanism for ensuring values do not get unexpected overridden)
5) should add a parameters_file: directive that would have same impact as parameters file (perhaps overrideable by the parameters section) but allow for referencing the same parameters file for multiple systems (and plans, I guess)

Wishlist
========
1) fail-on-edited-files - to avoid losing local changes, store md5 hash for any files transferred with the file directive.  if the md5 hash doesn't match the stored one before re-copy, fail and alert

Tests
=====
1) scripts that can run remotely
2) scripts that run locally
3) scripts that run locally against pre-defined input (`ps auxwww`, `dpkg -l`, etc)
4) simple checks for the presence of a file, something listening on a port, a port being open to the local machine
